/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k5hHCtYSicJ5vZr4xW3KEs
// Component: sLS7Ke6D4BL1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BasicHeaderMain from "../../BasicHeaderMain"; // plasmic-import: 68vzBgIlCkRh/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component
import HotelCardLoading from "../../HotelCardLoading"; // plasmic-import: bEupcMf2JY1O/component
import HotelCard from "../../HotelCard"; // plasmic-import: 38fPhjJykGrK/component
import DataViewAccordionHtml from "../../DataViewAccordionHtml"; // plasmic-import: gUzsfh9iKf6l/component
import { PlasmicHead } from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: k5hHCtYSicJ5vZr4xW3KEs/projectcss
import sty from "./PlasmicHub.module.css"; // plasmic-import: sLS7Ke6D4BL1/css

createPlasmicElementProxy;

export type PlasmicHub__VariantMembers = {};
export type PlasmicHub__VariantsArgs = {};
type VariantPropType = keyof PlasmicHub__VariantsArgs;
export const PlasmicHub__VariantProps = new Array<VariantPropType>();

export type PlasmicHub__ArgsType = {};
type ArgPropType = keyof PlasmicHub__ArgsType;
export const PlasmicHub__ArgProps = new Array<ArgPropType>();

export type PlasmicHub__OverridesType = {
  root?: Flex__<"div">;
  basicHeaderMain?: Flex__<typeof BasicHeaderMain>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  hotelCardLoading?: Flex__<typeof HotelCardLoading>;
  hotelCard?: Flex__<typeof HotelCard>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  ul?: Flex__<"ul">;
  dataViewAccordionHtml?: Flex__<typeof DataViewAccordionHtml>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  skeletonStyles?: Flex__<typeof Embed>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultHubProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHub__RenderFunc(props: {
  variants: PlasmicHub__VariantsArgs;
  args: PlasmicHub__ArgsType;
  overrides: PlasmicHub__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10
      },
      {
        path: "colors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          "purple-accent": "#FCEDFD",
          "purple-main": "#9E00A3",
          "green-accent": "#EBFFF5",
          "green-main": "#00A354",
          "blue-accent": "#EBFCFF",
          "blue-main": "#008BA3",
          "yellow-accent": "#FFFBEB",
          "yellow-main": "#A38500",
          "red-accent": "#FDEFED",
          "red-main": "#A31600"
        })
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <BasicHeaderMain
            data-plasmic-name={"basicHeaderMain"}
            data-plasmic-override={overrides.basicHeaderMain}
            className={classNames("__wab_instance", sty.basicHeaderMain)}
          />

          <Stack__
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__u2N7Y)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"\u0623\u0641\u0636\u0644 \u0641\u0646\u0627\u062f\u0642"}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aqJ7K
                )}
              >
                {
                  "\u0647\u0646\u0627\u060c \u0633\u062a\u062c\u062f \u0623\u0641\u0636\u0644 \u0627\u0644\u0641\u0646\u0627\u062f\u0642 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646\u0643 \u0627\u0644\u0625\u0642\u0627\u0645\u0629 \u0641\u064a\u0647\u0627 \u0641\u064a \u062f\u0648\u0644 \u0645\u062e\u062a\u0644\u0641\u0629 \u0645\u062b\u0644 \u0625\u064a\u0631\u0627\u0646\u060c \u062a\u0631\u0643\u064a\u0627\u060c \u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062a \u0648\u063a\u064a\u0631\u0647\u0627. \u0646\u062d\u0646 \u0646\u0636\u0639 \u0628\u064a\u0646 \u064a\u062f\u064a\u0643 \u062e\u064a\u0627\u0631\u0627\u062a \u0645\u062a\u0645\u064a\u0632\u0629 \u0644\u062a\u0633\u0647\u064a\u0644 \u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0628\u062d\u062b \u0639\u0646 \u0627\u0644\u0641\u0646\u062f\u0642 \u0627\u0644\u0623\u0646\u0633\u0628 \u0644\u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a\u0643\u060c \u0645\u0639 \u0636\u0645\u0627\u0646 \u0645\u0642\u0627\u0631\u0646\u0629 \u0633\u0647\u0644\u0629 \u0628\u064a\u0646 \u0623\u0633\u0639\u0627\u0631 \u0627\u0644\u0641\u0646\u0627\u062f\u0642 \u0648\u0627\u0644\u0639\u0631\u0648\u0636. \u064a\u0645\u0643\u0646\u0643 \u0627\u0644\u0627\u0637\u0644\u0627\u0639 \u0639\u0644\u0649 \u062a\u0642\u064a\u064a\u0645\u0627\u062a \u0645\u0648\u062b\u0648\u0642\u0629 \u0645\u0646 \u0646\u0632\u0644\u0627\u0621 \u062d\u0642\u064a\u0642\u064a\u064a\u0646\u060c \u0645\u0645\u0627 \u064a\u0636\u0645\u0646 \u0644\u0643 \u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0644\u0623\u0641\u0636\u0644. \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0630\u0644\u0643\u060c \u0646\u0642\u062f\u0645 \u062d\u062c\u0632\u064b\u0627 \u0633\u0631\u064a\u0639\u064b\u0627 \u0644\u0644\u0641\u0646\u0627\u062f\u0642 \u062e\u0644\u0627\u0644 \u062b\u0648\u0627\u0646\u064d\u060c \u0645\u0639 \u062f\u0641\u0639 \u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0644\u0636\u0645\u0627\u0646 \u0631\u0627\u062d\u062a\u0643. \u0643\u0645\u0627 \u0646\u0648\u0641\u0631 \u0644\u0643 \u062f\u0639\u0645\u064b\u0627 \u0645\u062a\u0648\u0627\u0635\u0644\u064b\u0627 \u0639\u0644\u0649 \u0645\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629 \u0644\u0636\u0645\u0627\u0646 \u062a\u062c\u0631\u0628\u0629 \u062e\u0627\u0644\u064a\u0629 \u0645\u0646 \u0627\u0644\u0645\u062a\u0627\u0639\u0628."
                }
              </div>
            </Stack__>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [
                    { name: "mashhad", title: "مشهد" },
                    { name: "istanbul", title: "إسطنبول" },
                    { name: "dubai", title: "دبي" },
                    { name: "antalya", title: "أنطاليا" },
                    { name: "beirut", title: "بيروت" },
                    { name: "tehran", title: "طهران" },
                    { name: "muscat", title: "مسقط" }
                  ];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentCity = __plasmic_item_0;
              const cityIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox___18YG7)}
                  key={cityIndex}
                >
                  <DataFetcher
                    data-plasmic-name={"httpRestApiFetcher"}
                    data-plasmic-override={overrides.httpRestApiFetcher}
                    className={classNames(
                      "__wab_instance",
                      sty.httpRestApiFetcher
                    )}
                    dataName={"fetchedData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchError.info.errors[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Error fetching data";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </DataCtxReader__>
                    }
                    errorName={"fetchError"}
                    loadingDisplay={
                      <DataCtxReader__>
                        {$ctx => (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r6C8
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6GoM
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__nGjfN
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "أفضل فنادق" + " " + currentCity.title
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </h2>
                              <ButtonButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.buttonButton__uwiA2
                                )}
                                endIcon={
                                  '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/></svg>'
                                }
                                link={(() => {
                                  try {
                                    return `https://sindibad.iq/hotel/${currentCity.name}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                showEndIcon={true}
                                text={
                                  "\u0634\u0627\u0647\u062f \u0627\u0644\u0643\u0644"
                                }
                                type={"link"}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___71Guo
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return [1, 2, 3, 4, 5];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <HotelCardLoading
                                    data-plasmic-name={"hotelCardLoading"}
                                    data-plasmic-override={
                                      overrides.hotelCardLoading
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.hotelCardLoading
                                    )}
                                    key={currentIndex}
                                  />
                                );
                              })}
                            </Stack__>
                          </Stack__>
                        )}
                      </DataCtxReader__>
                    }
                    method={"GET"}
                    noLayout={false}
                    previewSpinner={true}
                    url={`https://api.sindibad.iq/api/v1/hotel-content/HotelDetails/get-city-hotel-contents?cityId=${currentCity.name}&pageSize=${$state.pageSize}&pageNumber=1`}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v4N1U
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m6L9L
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__c6FCx
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "أفضل فنادق" + " " + currentCity.title
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h2>
                            <ButtonButton
                              className={classNames(
                                "__wab_instance",
                                sty.buttonButton__iI4Dm
                              )}
                              endIcon={
                                '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/></svg>'
                              }
                              link={(() => {
                                try {
                                  return `https://sindibad.iq/hotel/${currentCity.name}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              showEndIcon={true}
                              text={
                                "\u0634\u0627\u0647\u062f \u0627\u0644\u0643\u0644"
                              }
                              type={"link"}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xsOW
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.fetchedData.result.hotels;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentHotel = __plasmic_item_1;
                              const hotelIndex = __plasmic_idx_1;
                              return (
                                <HotelCard
                                  data-plasmic-name={"hotelCard"}
                                  data-plasmic-override={overrides.hotelCard}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.hotelCard
                                  )}
                                  colors={$state.colors}
                                  currentCity={(() => {
                                    try {
                                      return currentCity.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  currentHotel={currentHotel}
                                  key={hotelIndex}
                                />
                              );
                            })}
                          </Stack__>
                        </Stack__>
                      )}
                    </DataCtxReader__>
                  </DataFetcher>
                </div>
              );
            })}
            <div className={classNames(projectcss.all, sty.freeBox__w8Zs)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___3D1CX
                )}
              >
                {
                  "\u0627\u0644\u0648\u062c\u0647\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649"
                }
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__xKmBy)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [
                        { name: "rasht", title: "رشت" },
                        { name: "abadan", title: "عبادان" },
                        { name: "isfahan", title: "أصفهان" },
                        { name: "tabriz", title: "تبريز" },
                        { name: "sharjah", title: "الشارقة" },
                        { name: "shiraz", title: "شيراز" },
                        { name: "ramsar", title: "رامسر" },
                        { name: "kermanshah", title: "كرمانشاه" }
                      ];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicLink__
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return `https://sindibad.iq/hotel/${currentItem.name}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                  );
                })}
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__duIzm)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__fooam
                )}
              >
                {
                  " \u0644\u0645\u0627\u0630\u0627 \u062d\u062c\u0632 \u0627\u0644\u0641\u0646\u062f\u0642 \u0645\u0646 \u0633\u0646\u062f\u0628\u0627\u062f \u0647\u0648 \u0627\u0644\u062e\u064a\u0627\u0631 \u0627\u0644\u0623\u0641\u0636\u0644\u061f"
                }
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Nl0V
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0641\u064a \u0633\u0646\u062f\u0628\u0627\u062f\u060c \u0644\u0627 \u0646\u0642\u062f\u0645 \u062e\u062f\u0645\u0629 \u062d\u062c\u0632 \u0627\u0644\u0641\u0646\u0627\u062f\u0642 \u0641\u062d\u0633\u0628\u060c \u0628\u0644 \u0646\u0648\u0641\u0631 \u0644\u0643 \u062a\u062c\u0631\u0628\u0629 \u0633\u0641\u0631 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 \u0628\u0643\u0644 \u0633\u0647\u0648\u0644\u0629 \u0648\u062b\u0642\u0629.\n \u0627\u0633\u062a\u0645\u062a\u0639 \u0628\u0640:\n"
                    }
                  </React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__qZ0B
                        )}
                      >
                        {
                          "\u0645\u0642\u0627\u0631\u0646\u0629 \u0633\u0647\u0644\u0629 \u0628\u064a\u0646 \u0623\u0633\u0639\u0627\u0631 \u0627\u0644\u0641\u0646\u0627\u062f\u0642 \u0648\u0627\u0644\u0639\u0631\u0648\u0636\n"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__l1Mzs
                        )}
                      >
                        {
                          "\u062a\u0642\u064a\u064a\u0645\u0627\u062a \u0645\u0648\u062b\u0648\u0642\u0629 \u0645\u0646 \u0646\u0632\u0644\u0627\u0621 \u062d\u0642\u064a\u0642\u064a\u064a\u0646\n"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__c83Rh
                        )}
                      >
                        {
                          "\u062d\u062c\u0632 \u0633\u0631\u064a\u0639 \u0644\u0644\u0641\u0646\u0627\u062f\u0642 \u062e\u0644\u0627\u0644 \u062b\u0648\u0627\u0646"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___0H3Xg
                        )}
                      >
                        {
                          "\u062f\u0639\u0645 \u0645\u062a\u0648\u0627\u0635\u0644 \u0639\u0644\u0649 \u0645\u062f\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629\n"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__v29P
                        )}
                      >
                        {
                          "\u0637\u0631\u0642 \u062f\u0641\u0639 \u0645\u062a\u0646\u0648\u0639\u0629\u060c \u0639\u0628\u0631 \u0627\u0644\u0627\u0646\u062a\u0631\u0646\u062a \u0648\u0646\u0642\u062f\u0627\n"
                        }
                      </li>
                    </ul>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.freeBox__lHHa,
                "special-link-container"
              )}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__jZbX
                )}
              >
                {
                  "\u0627\u0644\u0623\u0633\u0626\u0644\u0629 \u0627\u0644\u0634\u0627\u0626\u0639\u0629 \u062d\u0648\u0644 \u0627\u0644\u0641\u0646\u0627\u062f\u0642 \u0645\u0646 \u0633\u0646\u062f\u0628\u0627\u062f"
                }
              </h2>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8Wymp)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [
                        {
                          q: "كيف يمكنني حجز فندق عبر سندباد؟",
                          a: " اختر المدينة وتاريخ الإقامة، ثم استعرض أفضل الفنادق واحجز فورًا بسهولة."
                        },
                        {
                          q: "هل أسعار حجز الفنادق تشمل جميع الرسوم؟",
                          a: " نعم، جميع الأسعار تشمل الضرائب والخدمات، مع توضيح إذا كان الحجز يتضمن الإفطار أو خدمات إضافية."
                        },
                        {
                          q: "هل يمكنني إلغاء حجز الفندق بعد الدفع؟",
                          a: " ذلك يعتمد على سياسة الإلغاء الخاصة بالفندق. بعض الفنادق تتيح إلغاء مجاني حتى وقت معين، ويتم توضيح ذلك قبل الحجز."
                        },
                        {
                          q: "ما هي طرق الدفع المتوفرة لحجز الفنادق؟",
                          a: "يمكن الدفع الإلكتروني باستخدام بطاقات زين كاش، ماستركارد، فيزا كارد وغيرها، أو من خلال خدمة سندي كاش التي تتيح لك الدفع عبر مندوب يصلك، كما يمكنك الدفع مباشرة داخل مكتبنا في بغداد، بالإضافة إلى إمكانية التحويل المالي عبر زين كاش وكي كارد حسب ما هو متاح في منطقتك."
                        },
                        {
                          q: "كيف أتواصل مع فريق الدعم؟",
                          a: "يمكنك التواصل معنا عبر الدردشة المباشرة أو من خلال <a href='https://sindibad.iq/assistant' target='_blank'> المساعد الذكي </a>داخل التطبيق، سواء لطرح أسئلة أو متابعة حجوزاتك بكل سهولة."
                        }
                      ];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <DataViewAccordionHtml
                      data-plasmic-name={"dataViewAccordionHtml"}
                      data-plasmic-override={overrides.dataViewAccordionHtml}
                      a={(() => {
                        try {
                          return currentItem.a;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(
                        "__wab_instance",
                        sty.dataViewAccordionHtml
                      )}
                      key={currentIndex}
                      q={(() => {
                        try {
                          return currentItem.q;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </Stack__>
            </Stack__>
          </Stack__>
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            canonical={"https://sindibad.iq/hotel"}
            description={
              "\u0627\u0643\u062a\u0634\u0641 \u0623\u0641\u0636\u0644 \u0627\u0644\u0641\u0646\u0627\u062f\u0642 \u0641\u064a \u062a\u0637\u0628\u064a\u0642 \u0633\u0646\u062f\u0628\u0627\u062f \u0645\u0639 \u062e\u064a\u0627\u0631\u0627\u062a \u0625\u0642\u0627\u0645\u0629 \u0631\u0627\u0626\u0639\u0629 \u0641\u064a \u0637\u0647\u0631\u0627\u0646\u060c \u062f\u0628\u064a\u060c \u0625\u0633\u0637\u0646\u0628\u0648\u0644. \u0627\u062d\u062c\u0632 \u0627\u0644\u0622\u0646 \u0644\u0623\u0641\u0636\u0644 \u0627\u0644\u0639\u0631\u0648\u0636 \u0648\u0627\u0644\u0645\u0631\u0627\u0641\u0642 ."
            }
            title={
              "\u0623\u0641\u0636\u0644 \u0641\u0646\u0627\u062f\u0642 \u062a\u0637\u0628\u064a\u0642 \u0633\u0646\u062f\u0628\u0627\u062f - \u062d\u062c\u0632 \u0641\u0646\u0627\u062f\u0642 \u0641\u064a \u0637\u0647\u0631\u0627\u0646\u060c \u062f\u0628\u064a\u060c \u0625\u0633\u0637\u0646\u0628\u0648\u0644"
            }
          />

          <Embed
            data-plasmic-name={"skeletonStyles"}
            data-plasmic-override={overrides.skeletonStyles}
            className={classNames("__wab_instance", sty.skeletonStyles)}
            code={
              "<style>\n  .skeleton-a {\n    animation: gradientAnimation 2.5s ease-in-out infinite;\n    background: linear-gradient(270deg, #ebebeb, #fafafa);\n    background-size: 200% 200%;\n    background-position: 0% 50%;\n  }\n  .skeleton-b {\n    animation: gradientAnimation 2.5s ease-in-out infinite;\n    background: linear-gradient(270deg, #dedede, #ebebeb);\n    background-size: 200% 200%;\n    background-position: 0% 50%;\n  }\n  @keyframes gradientAnimation {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n</style>\n"
            }
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<style>\n  .special-link-container a{\n    color: #0000ff\n  }\n</style>"
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "basicHeaderMain",
    "section",
    "h1",
    "httpRestApiFetcher",
    "hotelCardLoading",
    "hotelCard",
    "link",
    "ul",
    "dataViewAccordionHtml",
    "pageMetadataOverride",
    "skeletonStyles",
    "embedHtml"
  ],
  basicHeaderMain: ["basicHeaderMain"],
  section: [
    "section",
    "h1",
    "httpRestApiFetcher",
    "hotelCardLoading",
    "hotelCard",
    "link",
    "ul",
    "dataViewAccordionHtml"
  ],
  h1: ["h1"],
  httpRestApiFetcher: ["httpRestApiFetcher", "hotelCardLoading", "hotelCard"],
  hotelCardLoading: ["hotelCardLoading"],
  hotelCard: ["hotelCard"],
  link: ["link"],
  ul: ["ul"],
  dataViewAccordionHtml: ["dataViewAccordionHtml"],
  pageMetadataOverride: ["pageMetadataOverride"],
  skeletonStyles: ["skeletonStyles"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  basicHeaderMain: typeof BasicHeaderMain;
  section: "section";
  h1: "h1";
  httpRestApiFetcher: typeof DataFetcher;
  hotelCardLoading: typeof HotelCardLoading;
  hotelCard: typeof HotelCard;
  link: "a";
  ul: "ul";
  dataViewAccordionHtml: typeof DataViewAccordionHtml;
  pageMetadataOverride: typeof PlasmicHead;
  skeletonStyles: typeof Embed;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHub__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHub__VariantsArgs;
    args?: PlasmicHub__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHub__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHub__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHub__ArgProps,
          internalVariantPropNames: PlasmicHub__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHub__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHub";
  } else {
    func.displayName = `PlasmicHub.${nodeName}`;
  }
  return func;
}

export const PlasmicHub = Object.assign(
  // Top-level PlasmicHub renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    basicHeaderMain: makeNodeComponent("basicHeaderMain"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    hotelCardLoading: makeNodeComponent("hotelCardLoading"),
    hotelCard: makeNodeComponent("hotelCard"),
    link: makeNodeComponent("link"),
    ul: makeNodeComponent("ul"),
    dataViewAccordionHtml: makeNodeComponent("dataViewAccordionHtml"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    skeletonStyles: makeNodeComponent("skeletonStyles"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicHub
    internalVariantProps: PlasmicHub__VariantProps,
    internalArgProps: PlasmicHub__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHub;
/* prettier-ignore-end */
