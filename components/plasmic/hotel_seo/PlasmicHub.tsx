/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k5hHCtYSicJ5vZr4xW3KEs
// Component: sLS7Ke6D4BL1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BasicHeaderMain from "../../BasicHeaderMain"; // plasmic-import: 68vzBgIlCkRh/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: k5hHCtYSicJ5vZr4xW3KEs/projectcss
import sty from "./PlasmicHub.module.css"; // plasmic-import: sLS7Ke6D4BL1/css

createPlasmicElementProxy;

export type PlasmicHub__VariantMembers = {};
export type PlasmicHub__VariantsArgs = {};
type VariantPropType = keyof PlasmicHub__VariantsArgs;
export const PlasmicHub__VariantProps = new Array<VariantPropType>();

export type PlasmicHub__ArgsType = {};
type ArgPropType = keyof PlasmicHub__ArgsType;
export const PlasmicHub__ArgProps = new Array<ArgPropType>();

export type PlasmicHub__OverridesType = {
  root?: Flex__<"div">;
  basicHeaderMain?: Flex__<typeof BasicHeaderMain>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  skeletonStyles?: Flex__<typeof Embed>;
};

export interface DefaultHubProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHub__RenderFunc(props: {
  variants: PlasmicHub__VariantsArgs;
  args: PlasmicHub__ArgsType;
  overrides: PlasmicHub__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10
      },
      {
        path: "sliderCarousel[][].currentSlide",
        type: "private",
        variableType: "number",

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "colors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          "purple-accent": "#FCEDFD",
          "purple-main": "#9E00A3",
          "green-accent": "#EBFFF5",
          "green-main": "#00A354",
          "blue-accent": "#EBFCFF",
          "blue-main": "#008BA3",
          "yellow-accent": "#FFFBEB",
          "yellow-main": "#A38500",
          "red-accent": "#FDEFED",
          "red-main": "#A31600"
        })
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <BasicHeaderMain
            data-plasmic-name={"basicHeaderMain"}
            data-plasmic-override={overrides.basicHeaderMain}
            className={classNames("__wab_instance", sty.basicHeaderMain)}
          />

          <Stack__
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"\u0623\u0641\u0636\u0644 \u0641\u0646\u0627\u062f\u0642"}
            </h1>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [
                    { name: "mashhad", title: "مشهد" },
                    { name: "istanbul", title: "إسطنبول" },
                    { name: "dubai", title: "دبي" },
                    { name: "antalya", title: "أنطاليا" },
                    { name: "beirut", title: "بيروت" },
                    { name: "tehran", title: "طهران" },
                    { name: "muscat", title: "مسقط" }
                  ];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentCity = __plasmic_item_0;
              const cityIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox___18YG7)}
                  key={cityIndex}
                >
                  <DataFetcher
                    data-plasmic-name={"httpRestApiFetcher"}
                    data-plasmic-override={overrides.httpRestApiFetcher}
                    className={classNames(
                      "__wab_instance",
                      sty.httpRestApiFetcher
                    )}
                    dataName={"fetchedData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchError.info.errors[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Error fetching data";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </DataCtxReader__>
                    }
                    errorName={"fetchError"}
                    loadingDisplay={
                      <DataCtxReader__>
                        {$ctx => (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r6C8
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6GoM
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__nGjfN
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "أفضل فنادق" + " " + currentCity.title
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </h2>
                              <ButtonButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.buttonButton__uwiA2
                                )}
                                endIcon={
                                  '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/></svg>'
                                }
                                link={(() => {
                                  try {
                                    return `https://sindibad.iq/hotel/${currentCity.name}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                showEndIcon={true}
                                text={
                                  "\u0634\u0627\u0647\u062f \u0627\u0644\u0643\u0644"
                                }
                                type={"link"}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___71Guo
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return [1, 2, 3, 4, 5];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentHotel = __plasmic_item_1;
                                const hotelIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__l5Ue6
                                    )}
                                    key={hotelIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__cPm8M
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__pVcLb,
                                          "skeleton-a"
                                        )}
                                      />

                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__fqxKq
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___9Apoa,
                                            "skeleton-b"
                                          )}
                                        >
                                          {""}
                                        </div>
                                        <Embed
                                          className={classNames(
                                            "__wab_instance",
                                            sty.embedHtml___1BbX
                                          )}
                                          code={
                                            '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.04L12 21.35Z" fill="currentColor"/>\n</svg>\n'
                                          }
                                        />
                                      </Stack__>
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__clBxU
                                      )}
                                    >
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__m0Wil,
                                          "skeleton-a"
                                        )}
                                      >
                                        {""}
                                      </h3>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___5Fmdv
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return (() => {
                                                const rep = [];
                                                for (let i = 1; i <= 5; i++) {
                                                  rep.push(i);
                                                }
                                                return rep;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_2,
                                            __plasmic_idx_2
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_2;
                                            const currentIndex =
                                              __plasmic_idx_2;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__hGrgs
                                                )}
                                                key={currentIndex}
                                              >
                                                <Embed
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.embedHtml__riYbz
                                                  )}
                                                  code={
                                                    '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 17.27L18.18 21L16.54 13.97L22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27Z" fill="currentColor"/>\n</svg>\n'
                                                  }
                                                />
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__oxcaB
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return [1, 2, 3, 4];
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_2,
                                            __plasmic_idx_2
                                          ) => {
                                            const currentTag = __plasmic_item_2;
                                            const tagIndex = __plasmic_idx_2;
                                            return (
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__gn3BR,
                                                  "skeleton-a"
                                                )}
                                                key={tagIndex}
                                              />
                                            );
                                          }
                                        )}
                                      </Stack__>
                                    </Stack__>
                                  </div>
                                );
                              })}
                            </Stack__>
                          </Stack__>
                        )}
                      </DataCtxReader__>
                    }
                    method={"GET"}
                    noLayout={false}
                    previewSpinner={false}
                    url={`https://api.sindibad.iq/api/v1/hotel-content/HotelDetails/get-city-hotel-contents?cityId=${currentCity.name}&pageSize=${$state.pageSize}&pageNumber=1`}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v4N1U
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m6L9L
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__c6FCx
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "أفضل فنادق" + " " + currentCity.title
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h2>
                            <ButtonButton
                              className={classNames(
                                "__wab_instance",
                                sty.buttonButton__iI4Dm
                              )}
                              endIcon={
                                '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/></svg>'
                              }
                              link={(() => {
                                try {
                                  return `https://sindibad.iq/hotel/${currentCity.name}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              showEndIcon={true}
                              text={
                                "\u0634\u0627\u0647\u062f \u0627\u0644\u0643\u0644"
                              }
                              type={"link"}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xsOW
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.fetchedData.result.hotels;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentHotel = __plasmic_item_1;
                              const hotelIndex = __plasmic_idx_1;
                              return (
                                <PlasmicLink__
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.link__nCS
                                  )}
                                  component={Link}
                                  href={(() => {
                                    try {
                                      return `https://sindibad.iq/hotels/${currentCity.name}/${currentHotel.hotelId}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  key={hotelIndex}
                                  platform={"nextjs"}
                                  target={"_blank"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pHopP
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        arrows: false,
                                        beforeChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "currentSlide",
                                            [
                                              "sliderCarousel",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "currentSlide"
                                            ],
                                            SliderWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        centerMode: false,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.sliderCarousel
                                        ),
                                        dots: true,
                                        initialSlide: generateStateValueProp(
                                          $state,
                                          [
                                            "sliderCarousel",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "currentSlide"
                                          ]
                                        ),
                                        pauseOnFocus: true,
                                        ref: ref => {
                                          $refs["sliderCarousel"] = ref;
                                        },
                                        sliderScopeClassName:
                                          sty["sliderCarousel__slider"],
                                        swipeToSlide: true
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "currentSlide",
                                            plasmicStateName:
                                              "sliderCarousel[][].currentSlide"
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1],
                                        SliderWrapper_Helpers ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "sliderCarousel[][].currentSlide",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => 0
                                          }
                                        ],
                                        [__plasmic_idx_0, __plasmic_idx_1]
                                      );
                                      return (
                                        <SliderWrapper
                                          data-plasmic-name={"sliderCarousel"}
                                          data-plasmic-override={
                                            overrides.sliderCarousel
                                          }
                                          {...child$Props}
                                        >
                                          {(_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return currentHotel.content
                                                  .images;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_2,
                                              __plasmic_idx_2
                                            ) => {
                                              const currentImage =
                                                __plasmic_item_2;
                                              const imageIndex =
                                                __plasmic_idx_2;
                                              return (
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__wkfhe
                                                  )}
                                                  key={imageIndex}
                                                >
                                                  <PlasmicImg__
                                                    alt={""}
                                                    className={classNames(
                                                      sty.img__ukEba
                                                    )}
                                                    displayHeight={"100%"}
                                                    displayMaxHeight={"none"}
                                                    displayMaxWidth={"none"}
                                                    displayMinHeight={"0"}
                                                    displayMinWidth={"0"}
                                                    displayWidth={"320px"}
                                                    src={(() => {
                                                      try {
                                                        return currentImage.url;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  />
                                                </div>
                                              );
                                            }
                                          )}
                                        </SliderWrapper>
                                      );
                                    })()}
                                    {(() => {
                                      try {
                                        return currentHotel.content.rate > 3;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__dz2Gb
                                        )}
                                        style={(() => {
                                          try {
                                            return (() => {
                                              const r =
                                                Math.round(
                                                  currentHotel.content.rate * 10
                                                ) / 10;
                                              const lvl =
                                                r > 9.5
                                                  ? "purple"
                                                  : r > 8
                                                  ? "green"
                                                  : r > 6.5
                                                  ? "blue"
                                                  : r > 5
                                                  ? "yellow"
                                                  : "red";
                                              return {
                                                "background-color":
                                                  $state.colors[
                                                    lvl + "-accent"
                                                  ],
                                                color:
                                                  $state.colors[lvl + "-main"]
                                              };
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__o2B3A
                                          )}
                                          dir={"ltr"}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return "/10";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sG4Ie
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  Math.round(
                                                    currentHotel.content.rate *
                                                      10
                                                  ) / 10
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <Embed
                                          className={classNames(
                                            "__wab_instance",
                                            sty.embedHtml__pz8Ua
                                          )}
                                          code={
                                            '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.04L12 21.35Z" fill="currentColor"/>\n</svg>\n'
                                          }
                                        />
                                      </Stack__>
                                    ) : null}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__k3XDa
                                    )}
                                  >
                                    <h3
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h3,
                                        projectcss.__wab_text,
                                        sty.h3__yELe7
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentHotel.content.title
                                              .locale;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h3>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__sRdgz
                                      )}
                                    >
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return (() => {
                                              const rep = [];
                                              for (
                                                let i = 1;
                                                i <= currentHotel.content.star;
                                                i++
                                              ) {
                                                rep.push(i);
                                              }
                                              return rep;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_2, __plasmic_idx_2) => {
                                          const currentItem = __plasmic_item_2;
                                          const currentIndex = __plasmic_idx_2;
                                          return (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__m6NfA
                                              )}
                                              key={currentIndex}
                                            >
                                              <Embed
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.embedHtml__qQ9Bl
                                                )}
                                                code={
                                                  '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 17.27L18.18 21L16.54 13.97L22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27Z" fill="currentColor"/>\n</svg>\n'
                                                }
                                              />
                                            </div>
                                          );
                                        }
                                      )}
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__g2Xr
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                currentHotel.content.star +
                                                " " +
                                                "نجوم"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__afDre
                                      )}
                                    >
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return currentHotel.content.tags;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_2, __plasmic_idx_2) => {
                                          const currentTag = __plasmic_item_2;
                                          const tagIndex = __plasmic_idx_2;
                                          return (
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___799X1
                                              )}
                                              key={tagIndex}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__nzCzT
                                                )}
                                                displayHeight={"16px"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"16px"}
                                                loading={"lazy"}
                                                src={(() => {
                                                  try {
                                                    return currentTag.tagIconUrl;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___6Q1Mu
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentTag
                                                        .displayText.locale;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </Stack__>
                                          );
                                        }
                                      )}
                                    </Stack__>
                                  </Stack__>
                                </PlasmicLink__>
                              );
                            })}
                          </Stack__>
                        </Stack__>
                      )}
                    </DataCtxReader__>
                  </DataFetcher>
                </div>
              );
            })}
            <div className={classNames(projectcss.all, sty.freeBox__w8Zs)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___3D1CX
                )}
              >
                {
                  "\u0627\u0644\u0648\u062c\u0647\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649"
                }
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__xKmBy)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [
                        { name: "rasht", title: "رشت" },
                        { name: "abadan", title: "عبادان" },
                        { name: "isfahan", title: "أصفهان" },
                        { name: "tabriz", title: "تبريز" },
                        { name: "sharjah", title: "الشارقة" },
                        { name: "shiraz", title: "شيراز" },
                        { name: "ramsar", title: "رامسر" },
                        { name: "kermanshah", title: "كرمانشاه" }
                      ];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__d3ZAj
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return `https://sindibad.iq/hotel/${currentItem.name}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                  );
                })}
              </div>
            </div>
            <Embed
              data-plasmic-name={"skeletonStyles"}
              data-plasmic-override={overrides.skeletonStyles}
              className={classNames("__wab_instance", sty.skeletonStyles)}
              code={
                "<style>\n  .skeleton-a {\n    animation: gradientAnimation 2.5s ease-in-out infinite;\n    background: linear-gradient(270deg, #ebebeb, #fafafa);\n    background-size: 200% 200%;\n    background-position: 0% 50%;\n  }\n  .skeleton-b {\n    animation: gradientAnimation 2.5s ease-in-out infinite;\n    background: linear-gradient(270deg, #dedede, #ebebeb);\n    background-size: 200% 200%;\n    background-position: 0% 50%;\n  }\n  @keyframes gradientAnimation {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n</style>\n"
              }
            />
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "basicHeaderMain",
    "section",
    "h1",
    "httpRestApiFetcher",
    "sliderCarousel",
    "skeletonStyles"
  ],
  basicHeaderMain: ["basicHeaderMain"],
  section: [
    "section",
    "h1",
    "httpRestApiFetcher",
    "sliderCarousel",
    "skeletonStyles"
  ],
  h1: ["h1"],
  httpRestApiFetcher: ["httpRestApiFetcher", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  skeletonStyles: ["skeletonStyles"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  basicHeaderMain: typeof BasicHeaderMain;
  section: "section";
  h1: "h1";
  httpRestApiFetcher: typeof DataFetcher;
  sliderCarousel: typeof SliderWrapper;
  skeletonStyles: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHub__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHub__VariantsArgs;
    args?: PlasmicHub__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHub__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHub__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHub__ArgProps,
          internalVariantPropNames: PlasmicHub__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHub__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHub";
  } else {
    func.displayName = `PlasmicHub.${nodeName}`;
  }
  return func;
}

export const PlasmicHub = Object.assign(
  // Top-level PlasmicHub renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    basicHeaderMain: makeNodeComponent("basicHeaderMain"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    skeletonStyles: makeNodeComponent("skeletonStyles"),

    // Metadata about props expected for PlasmicHub
    internalVariantProps: PlasmicHub__VariantProps,
    internalArgProps: PlasmicHub__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHub;
/* prettier-ignore-end */
