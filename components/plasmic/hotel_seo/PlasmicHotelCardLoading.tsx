/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k5hHCtYSicJ5vZr4xW3KEs
// Component: bEupcMf2JY1O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: k5hHCtYSicJ5vZr4xW3KEs/projectcss
import sty from "./PlasmicHotelCardLoading.module.css"; // plasmic-import: bEupcMf2JY1O/css

createPlasmicElementProxy;

export type PlasmicHotelCardLoading__VariantMembers = {
  fill: "fill";
};
export type PlasmicHotelCardLoading__VariantsArgs = {
  fill?: SingleBooleanChoiceArg<"fill">;
};
type VariantPropType = keyof PlasmicHotelCardLoading__VariantsArgs;
export const PlasmicHotelCardLoading__VariantProps = new Array<VariantPropType>(
  "fill"
);

export type PlasmicHotelCardLoading__ArgsType = {};
type ArgPropType = keyof PlasmicHotelCardLoading__ArgsType;
export const PlasmicHotelCardLoading__ArgProps = new Array<ArgPropType>();

export type PlasmicHotelCardLoading__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHotelCardLoadingProps {
  fill?: SingleBooleanChoiceArg<"fill">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHotelCardLoading__RenderFunc(props: {
  variants: PlasmicHotelCardLoading__VariantsArgs;
  args: PlasmicHotelCardLoading__ArgsType;
  overrides: PlasmicHotelCardLoading__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "slideNum",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "fill",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fill
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_css.plasmic_tokens,
        sty.root,
        { [sty.rootfill]: hasVariant($state, "fill", "fill") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rl5Xc)}>
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox___8PYro,
            "skeleton-a"
          )}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fgXa2)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jjrMg)} />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__wYTy7)}
            code={
              '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.04L12 21.35Z" fill="currentColor"/>\n</svg>\n'
            }
          />
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ygPvz)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__tkkk0)}>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__k2NAk,
              "skeleton-a"
            )}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__inCai)}>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return [1, 2, 3, 4, 5];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__iuvvN)}
                key={currentIndex}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__ackYw)}
                  code={
                    '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 17.27L18.18 21L16.54 13.97L22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27Z" fill="currentColor"/>\n</svg>\n'
                  }
                />
              </div>
            );
          })}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bUuFa)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return [1, 2, 3, 4];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentTag = __plasmic_item_0;
            const tagIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.freeBox__kshyZ,
                  "skeleton-a"
                )}
                key={tagIndex}
              />
            );
          })}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHotelCardLoading__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHotelCardLoading__VariantsArgs;
    args?: PlasmicHotelCardLoading__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHotelCardLoading__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHotelCardLoading__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHotelCardLoading__ArgProps,
          internalVariantPropNames: PlasmicHotelCardLoading__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHotelCardLoading__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHotelCardLoading";
  } else {
    func.displayName = `PlasmicHotelCardLoading.${nodeName}`;
  }
  return func;
}

export const PlasmicHotelCardLoading = Object.assign(
  // Top-level PlasmicHotelCardLoading renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHotelCardLoading
    internalVariantProps: PlasmicHotelCardLoading__VariantProps,
    internalArgProps: PlasmicHotelCardLoading__ArgProps
  }
);

export default PlasmicHotelCardLoading;
/* prettier-ignore-end */
