/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k5hHCtYSicJ5vZr4xW3KEs
// Component: R1PuKt9edSLG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import BasicHeaderMain from "../../BasicHeaderMain"; // plasmic-import: 68vzBgIlCkRh/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import HotelCard from "../../HotelCard"; // plasmic-import: 38fPhjJykGrK/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component
import { PlasmicHead } from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "../library/PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: k5hHCtYSicJ5vZr4xW3KEs/projectcss
import sty from "./PlasmicByCity.module.css"; // plasmic-import: R1PuKt9edSLG/css

createPlasmicElementProxy;

export type PlasmicByCity__VariantMembers = {};
export type PlasmicByCity__VariantsArgs = {};
type VariantPropType = keyof PlasmicByCity__VariantsArgs;
export const PlasmicByCity__VariantProps = new Array<VariantPropType>();

export type PlasmicByCity__ArgsType = {};
type ArgPropType = keyof PlasmicByCity__ArgsType;
export const PlasmicByCity__ArgProps = new Array<ArgPropType>();

export type PlasmicByCity__OverridesType = {
  root?: Flex__<"div">;
  basicHeaderMain?: Flex__<typeof BasicHeaderMain>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  h3?: Flex__<"h3">;
  h2?: Flex__<"h2">;
  skeletonStyles?: Flex__<typeof Embed>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
};

export interface DefaultByCityProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicByCity__RenderFunc(props: {
  variants: PlasmicByCity__VariantsArgs;
  args: PlasmicByCity__ArgsType;
  overrides: PlasmicByCity__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return [
                  {
                    name: "mashhad",
                    title: "مشهد"
                  },
                  {
                    name: "istanbul",
                    title: "إسطنبول"
                  },
                  {
                    name: "dubai",
                    title: "دبي"
                  },
                  {
                    name: "antalya",
                    title: "أنطاليا"
                  },
                  {
                    name: "beirut",
                    title: "بيروت"
                  },
                  {
                    name: "tehran",
                    title: "طهران"
                  },
                  {
                    name: "muscat",
                    title: "مسقط"
                  },
                  {
                    name: "rasht",
                    title: "رشت"
                  },
                  {
                    name: "abadan",
                    title: "عبادان"
                  },
                  {
                    name: "isfahan",
                    title: "أصفهان"
                  },
                  {
                    name: "tabriz",
                    title: "تبريز"
                  },
                  {
                    name: "sharjah",
                    title: "الشارقة"
                  },
                  {
                    name: "shiraz",
                    title: "شيراز"
                  },
                  {
                    name: "ramsar",
                    title: "رامسر"
                  },
                  {
                    name: "kermanshah",
                    title: "كرمانشاه"
                  }
                ].find(c => c.name == $ctx.params.city).title;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "colors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          "purple-accent": "#FCEDFD",
          "purple-main": "#9E00A3",
          "green-accent": "#EBFFF5",
          "green-main": "#00A354",
          "blue-accent": "#EBFCFF",
          "blue-main": "#008BA3",
          "yellow-accent": "#FFFBEB",
          "yellow-main": "#A38500",
          "red-accent": "#FDEFED",
          "red-main": "#A31600"
        })
      },
      {
        path: "page",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    results: usePlasmicDataOp(() => {
      return {
        sourceId: "o4vw3QcswAi2j8Ex5yygqP",
        opId: "d099d077-c947-4822-972a-2808620ff5c3",
        userArgs: {
          params: [$ctx.params.city, $state.page]
        },
        cacheKey: `plasmic.$.d099d077-c947-4822-972a-2808620ff5c3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <BasicHeaderMain
            data-plasmic-name={"basicHeaderMain"}
            data-plasmic-override={overrides.basicHeaderMain}
            className={classNames("__wab_instance", sty.basicHeaderMain)}
          />

          <Stack__
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__sXuNw)}
              id={"breadcrumb-list"}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__luO24
                )}
                component={Link}
                href={"https://sindibad.iq/?type=hotel"}
                platform={"nextjs"}
                target={"_blank"}
              >
                {"\u0633\u0646\u062f\u0628\u0627\u062f"}
              </PlasmicLink__>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__ys785)}
                code={
                  '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/>\n</svg>\n'
                }
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__oOcJ3
                )}
                component={Link}
                href={"https://sindibad.iq/hotel"}
                platform={"nextjs"}
                target={"_blank"}
              >
                {"\u0641\u0646\u0627\u062f\u0642"}
              </PlasmicLink__>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__vnpHc)}
                code={
                  '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/>\n</svg>\n'
                }
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__dShCg
                )}
                component={Link}
                href={"https://sindibad.iq/airports"}
                platform={"nextjs"}
                target={"_blank"}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "أفضل فنادق" + " " + $state.variable;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0641\u0646\u0627\u062f\u0642";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </PlasmicLink__>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cSl1U)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ws4Gn)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "أفضل فنادق" + " " + $state.variable;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h1>
              </Stack__>
              {(() => {
                try {
                  return $state.page == 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__pEeX)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.results.data.response.result.hotels;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentHotel = __plasmic_item_0;
                    const hotelIndex = __plasmic_idx_0;
                    return (
                      <HotelCard
                        className={classNames(
                          "__wab_instance",
                          sty.hotelCard__lozpd
                        )}
                        colors={(() => {
                          try {
                            return $state.colors;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                "purple-accent": "#FCEDFD",
                                "purple-main": "#9E00A3",
                                "green-accent": "#EBFFF5",
                                "green-main": "#00A354",
                                "blue-accent": "#EBFCFF",
                                "blue-main": "#008BA3",
                                "yellow-accent": "#FFFBEB",
                                "yellow-main": "#A38500",
                                "red-accent": "#FDEFED",
                                "red-main": "#A31600"
                              };
                            }
                            throw e;
                          }
                        })()}
                        currentCity={(() => {
                          try {
                            return $ctx.params.city;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        currentHotel={(() => {
                          try {
                            return currentHotel;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        fill={true}
                        key={hotelIndex}
                      />
                    );
                  })}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.page > 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <DataFetcher
                  data-plasmic-name={"httpRestApiFetcher"}
                  data-plasmic-override={overrides.httpRestApiFetcher}
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher
                  )}
                  dataName={"fetchedData"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"fetchError"}
                  loadingDisplay={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uFtO
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [...Array(24).keys()];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentHotel = __plasmic_item_0;
                            const hotelIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__d3TQu
                                )}
                                key={hotelIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qEdD3
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__feUu9,
                                      "skeleton-a"
                                    )}
                                  />

                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ycMmI
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bi58N,
                                        "skeleton-b"
                                      )}
                                    >
                                      {""}
                                    </div>
                                    <Embed
                                      className={classNames(
                                        "__wab_instance",
                                        sty.embedHtml__ekSnY
                                      )}
                                      code={
                                        '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.04L12 21.35Z" fill="currentColor"/>\n</svg>\n'
                                      }
                                    />
                                  </Stack__>
                                </div>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__w3J27
                                  )}
                                >
                                  <h3
                                    data-plasmic-name={"h3"}
                                    data-plasmic-override={overrides.h3}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h3,
                                      projectcss.__wab_text,
                                      sty.h3,
                                      "skeleton-a"
                                    )}
                                  >
                                    {""}
                                  </h3>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__myOs
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return (() => {
                                            const rep = [];
                                            for (let i = 1; i <= 5; i++) {
                                              rep.push(i);
                                            }
                                            return rep;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__hYz9
                                            )}
                                            key={currentIndex}
                                          >
                                            <Embed
                                              className={classNames(
                                                "__wab_instance",
                                                sty.embedHtml__jf5Te
                                              )}
                                              code={
                                                '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 17.27L18.18 21L16.54 13.97L22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27Z" fill="currentColor"/>\n</svg>\n'
                                              }
                                            />
                                          </div>
                                        );
                                      }
                                    )}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zOag5
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return [1, 2, 3, 4];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentTag = __plasmic_item_1;
                                        const tagIndex = __plasmic_idx_1;
                                        return (
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___3LQlL,
                                              "skeleton-a"
                                            )}
                                            key={tagIndex}
                                          />
                                        );
                                      }
                                    )}
                                  </Stack__>
                                </Stack__>
                              </div>
                            );
                          })}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  method={"GET"}
                  noLayout={false}
                  previewSpinner={true}
                  url={`https://api.sindibad.iq/api/v1/hotel-content/HotelDetails/get-city-hotel-contents?cityId=${$ctx.params.city}&pageSize=20&pageNumber=${$state.page}`}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nhAn
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.results.data.response.result
                                .hotels;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentHotel = __plasmic_item_0;
                          const hotelIndex = __plasmic_idx_0;
                          return (
                            <HotelCard
                              className={classNames(
                                "__wab_instance",
                                sty.hotelCard__lm2PT
                              )}
                              currentCity={(() => {
                                try {
                                  return $ctx.params.city;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              currentHotel={(() => {
                                try {
                                  return currentHotel;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              fill={true}
                              key={hotelIndex}
                            />
                          );
                        })}
                      </div>
                    )}
                  </DataCtxReader__>
                </DataFetcher>
              ) : null}
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ekdb8)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktopDefault")
                    ? (() => {
                        try {
                          return (
                            Math.ceil(
                              $queries.results.data.response.result
                                .hotelsCount / 24
                            ) > $state.page
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            Math.ceil(
                              $queries.results.data.response.result
                                .hotelsCount / 24
                            ) > $state.page
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <ButtonButton
                    className={classNames(
                      "__wab_instance",
                      sty.buttonButton__hj8Jj
                    )}
                    language={"iconOnly"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["page"]
                              },
                              operation: 0,
                              value: $state.page + 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.scrollTo({
                                  top: 0,
                                  behavior: "smooth"
                                });
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    startIcon={
                      '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.59009 16.59L13.1701 12L8.59009 7.41L10.0001 6L16.0001 12L10.0001 18L8.59009 16.59Z" fill="currentColor"/></svg>'
                    }
                    text={``}
                    type={"link"}
                  />
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fem5Y)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "desktopDefault")
                      ? (() => {
                          try {
                            return (
                              Math.ceil(
                                $queries.results.data.response.result
                                  .hotelsCount / 24
                              ) >
                              $state.page + 2
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              Math.ceil(
                                $queries.results.data.response.result
                                  .hotelsCount / 24
                              ) >
                              $state.page + 2
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__prif6
                      )}
                    >
                      {"..."}
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "desktopDefault")
                      ? (() => {
                          try {
                            return (
                              Math.ceil(
                                $queries.results.data.response.result
                                  .hotelsCount / 24
                              ) >
                              $state.page + 1
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              Math.ceil(
                                $queries.results.data.response.result
                                  .hotelsCount / 24
                              ) >
                              $state.page + 1
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <ButtonButton
                      className={classNames(
                        "__wab_instance",
                        sty.buttonButton__g6Lpv
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["page"]
                                },
                                operation: 0,
                                value: $state.page + 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePage"] != null &&
                          typeof $steps["updatePage"] === "object" &&
                          typeof $steps["updatePage"].then === "function"
                        ) {
                          $steps["updatePage"] = await $steps["updatePage"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.scrollTo({
                                    top: 0,
                                    behavior: "smooth"
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      text={(() => {
                        try {
                          return $state.page + 2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      type={"link"}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "desktopDefault")
                      ? (() => {
                          try {
                            return (
                              Math.ceil(
                                $queries.results.data.response.result
                                  .hotelsCount / 24
                              ) > $state.page
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              Math.ceil(
                                $queries.results.data.response.result
                                  .hotelsCount / 24
                              ) > $state.page
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <ButtonButton
                      className={classNames(
                        "__wab_instance",
                        sty.buttonButton___6Zab
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["page"]
                                },
                                operation: 0,
                                value: $state.page + 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePage"] != null &&
                          typeof $steps["updatePage"] === "object" &&
                          typeof $steps["updatePage"].then === "function"
                        ) {
                          $steps["updatePage"] = await $steps["updatePage"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.scrollTo({
                                    top: 0,
                                    behavior: "smooth"
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      text={(() => {
                        try {
                          return $state.page + 1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      type={"link"}
                    />
                  ) : null}
                  <ButtonButton
                    className={classNames(
                      "__wab_instance",
                      sty.buttonButton__hgHBd
                    )}
                    color={"themeSecondary"}
                    isDisabled={true}
                    text={(() => {
                      try {
                        return $state.page;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={"link"}
                  />

                  {(
                    hasVariant(globalVariants, "screen", "desktopDefault")
                      ? (() => {
                          try {
                            return $state.page > 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.page < 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8DS2T
                      )}
                    >
                      {"..."}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.page != 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <ButtonButton
                      className={classNames(
                        "__wab_instance",
                        sty.buttonButton__l3Zy
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updatePage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["page"]
                                },
                                operation: 0,
                                value: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePage"] != null &&
                          typeof $steps["updatePage"] === "object" &&
                          typeof $steps["updatePage"].then === "function"
                        ) {
                          $steps["updatePage"] = await $steps["updatePage"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.scrollTo({
                                    top: 0,
                                    behavior: "smooth"
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      text={"1"}
                      type={"link"}
                    />
                  ) : null}
                </Stack__>
                {(() => {
                  try {
                    return $state.page != 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <ButtonButton
                    className={classNames(
                      "__wab_instance",
                      sty.buttonButton__srBiU
                    )}
                    language={"iconOnly"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["page"]
                              },
                              operation: 0,
                              value: $state.page - 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.scrollTo({
                                  top: 0,
                                  behavior: "smooth"
                                });
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    startIcon={
                      '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/></svg>'
                    }
                    text={``}
                    type={"link"}
                  />
                ) : null}
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__u0SQt)}>
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {
                  "\u0627\u0644\u0648\u062c\u0647\u0627\u062a \u0627\u0644\u0623\u062e\u0631\u0649"
                }
              </h2>
              <div className={classNames(projectcss.all, sty.freeBox__pxv4H)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [
                        { name: "mashhad", title: "مشهد" },
                        { name: "istanbul", title: "إسطنبول" },
                        { name: "dubai", title: "دبي" },
                        { name: "antalya", title: "أنطاليا" },
                        { name: "beirut", title: "بيروت" },
                        { name: "tehran", title: "طهران" },
                        { name: "muscat", title: "مسقط" }
                      ].filter(c => c.name != $ctx.params.city);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__hzabS
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return `https://sindibad.iq/hotel/${currentItem.name}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </PlasmicLink__>
                  );
                })}
              </div>
            </div>
          </Stack__>
          <Embed
            data-plasmic-name={"skeletonStyles"}
            data-plasmic-override={overrides.skeletonStyles}
            className={classNames("__wab_instance", sty.skeletonStyles)}
            code={
              "<style>\n  .skeleton-a {\n    animation: gradientAnimation 2.5s ease-in-out infinite;\n    background: linear-gradient(270deg, #ebebeb, #fafafa);\n    background-size: 200% 200%;\n    background-position: 0% 50%;\n  }\n  .skeleton-b {\n    animation: gradientAnimation 2.5s ease-in-out infinite;\n    background: linear-gradient(270deg, #dedede, #ebebeb);\n    background-size: 200% 200%;\n    background-position: 0% 50%;\n  }\n  @keyframes gradientAnimation {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n</style>\n"
            }
          />

          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            canonical={`https://sindibad.iq/hotel/${$ctx.params.city}`}
            description={`اكتشف أفضل فنادق ${$state.variable} في تطبيق سندباد مع خيارات إقامة رائعة | احجز الآن لأفضل العروض والمرافق .`}
            title={`أفضل فنادق ${$state.variable} في تطبيق سندباد`}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "basicHeaderMain",
    "section",
    "h1",
    "httpRestApiFetcher",
    "h3",
    "h2",
    "skeletonStyles",
    "pageMetadataOverride"
  ],
  basicHeaderMain: ["basicHeaderMain"],
  section: ["section", "h1", "httpRestApiFetcher", "h3", "h2"],
  h1: ["h1"],
  httpRestApiFetcher: ["httpRestApiFetcher", "h3"],
  h3: ["h3"],
  h2: ["h2"],
  skeletonStyles: ["skeletonStyles"],
  pageMetadataOverride: ["pageMetadataOverride"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  basicHeaderMain: typeof BasicHeaderMain;
  section: "section";
  h1: "h1";
  httpRestApiFetcher: typeof DataFetcher;
  h3: "h3";
  h2: "h2";
  skeletonStyles: typeof Embed;
  pageMetadataOverride: typeof PlasmicHead;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicByCity__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicByCity__VariantsArgs;
    args?: PlasmicByCity__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicByCity__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicByCity__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicByCity__ArgProps,
          internalVariantPropNames: PlasmicByCity__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicByCity__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicByCity";
  } else {
    func.displayName = `PlasmicByCity.${nodeName}`;
  }
  return func;
}

export const PlasmicByCity = Object.assign(
  // Top-level PlasmicByCity renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    basicHeaderMain: makeNodeComponent("basicHeaderMain"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    h3: makeNodeComponent("h3"),
    h2: makeNodeComponent("h2"),
    skeletonStyles: makeNodeComponent("skeletonStyles"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),

    // Metadata about props expected for PlasmicByCity
    internalVariantProps: PlasmicByCity__VariantProps,
    internalArgProps: PlasmicByCity__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicByCity;
/* prettier-ignore-end */
