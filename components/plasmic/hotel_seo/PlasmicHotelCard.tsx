/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k5hHCtYSicJ5vZr4xW3KEs
// Component: 38fPhjJykGrK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Lightbox from "../../Lightbox"; // plasmic-import: HNG-1UOHYsKi/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: k5hHCtYSicJ5vZr4xW3KEs/projectcss
import sty from "./PlasmicHotelCard.module.css"; // plasmic-import: 38fPhjJykGrK/css

createPlasmicElementProxy;

export type PlasmicHotelCard__VariantMembers = {
  fill: "fill";
};
export type PlasmicHotelCard__VariantsArgs = {
  fill?: SingleBooleanChoiceArg<"fill">;
};
type VariantPropType = keyof PlasmicHotelCard__VariantsArgs;
export const PlasmicHotelCard__VariantProps = new Array<VariantPropType>(
  "fill"
);

export type PlasmicHotelCard__ArgsType = {
  colors?: any;
  currentHotel?: any;
  currentCity?: string;
};
type ArgPropType = keyof PlasmicHotelCard__ArgsType;
export const PlasmicHotelCard__ArgProps = new Array<ArgPropType>(
  "colors",
  "currentHotel",
  "currentCity"
);

export type PlasmicHotelCard__OverridesType = {
  root?: Flex__<"div">;
  lightbox?: Flex__<typeof Lightbox>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  h3?: Flex__<"h3">;
};

export interface DefaultHotelCardProps {
  colors?: any;
  currentHotel?: any;
  currentCity?: string;
  fill?: SingleBooleanChoiceArg<"fill">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHotelCard__RenderFunc(props: {
  variants: PlasmicHotelCard__VariantsArgs;
  args: PlasmicHotelCard__ArgsType;
  overrides: PlasmicHotelCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          colors: {
            "purple-accent": "#FCEDFD",
            "purple-main": "#9E00A3",
            "green-accent": "#EBFFF5",
            "green-main": "#00A354",
            "blue-accent": "#EBFCFF",
            "blue-main": "#008BA3",
            "yellow-accent": "#FFFBEB",
            "yellow-main": "#A38500",
            "red-accent": "#FDEFED",
            "red-main": "#A31600"
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "slideNum",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "fill",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fill
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_css.plasmic_tokens,
        sty.root,
        { [sty.rootfill]: hasVariant($state, "fill", "fill") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___4QndW)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__liydm)}
          displayHeight={"160px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (window.location.href = `https://sindibad.iq/hotels/${$props.currentCity}/${$props.currentHotel.hotelId}`);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          src={(() => {
            try {
              return $props.currentHotel.content.images[0].thumbnailUrl;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <Lightbox
          data-plasmic-name={"lightbox"}
          data-plasmic-override={overrides.lightbox}
          className={classNames("__wab_instance", sty.lightbox)}
          currentHotel={args.currentHotel}
          slideNum={$state.slideNum}
        />

        {(() => {
          try {
            return $props.currentHotel.content.rate > 3;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7Lsqf)}
            style={(() => {
              try {
                return (() => {
                  const r =
                    Math.round($props.currentHotel.content.rate * 10) / 10;
                  const lvl =
                    r > 9.5
                      ? "purple"
                      : r > 8
                      ? "green"
                      : r > 6.5
                      ? "blue"
                      : r > 5
                      ? "yellow"
                      : "red";
                  return {
                    "background-color": $props.colors[lvl + "-accent"],
                    color: $props.colors[lvl + "-main"]
                  };
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jHJu
              )}
              dir={"ltr"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "/10";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nbUrU
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      Math.round($props.currentHotel.content.rate * 10) / 10
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__n2X4W)}
              code={
                '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 21.35L10.55 20.03C5.4 15.36 2 12.28 2 8.5C2 5.42 4.42 3 7.5 3C9.24 3 10.91 3.81 12 5.09C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.42 22 8.5C22 12.28 18.6 15.36 13.45 20.04L12 21.35Z" fill="currentColor"/>\n</svg>\n'
              }
            />
          </Stack__>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__yaAaF)}>
          <ButtonButton
            className={classNames("__wab_instance", sty.buttonButton__jccB9)}
            color={"themeSecondary"}
            isRound={true}
            language={"iconOnly"}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideNum"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["slideNum"]
                      },
                      operation: 0,
                      value: (() => {
                        const max =
                          $props.currentHotel.content.images.length - 1;
                        if ($state.slideNum == 0) return max;
                        else return $state.slideNum - 1;
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideNum"] != null &&
                typeof $steps["updateSlideNum"] === "object" &&
                typeof $steps["updateSlideNum"].then === "function"
              ) {
                $steps["updateSlideNum"] = await $steps["updateSlideNum"];
              }
            }}
            size={"small"}
            startIcon={
              '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.41 16.59L10.83 12L15.41 7.41L14 6L8 12L14 18L15.41 16.59Z" fill="currentColor"/></svg>'
            }
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___38XCz)}>
          <ButtonButton
            className={classNames("__wab_instance", sty.buttonButton__sCj0S)}
            color={"themeSecondary"}
            isRound={true}
            language={"iconOnly"}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideNum"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["slideNum"]
                      },
                      operation: 0,
                      value: (() => {
                        const max =
                          $props.currentHotel.content.images.length - 1;
                        if ($state.slideNum == max) return 0;
                        else return $state.slideNum + 1;
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideNum"] != null &&
                typeof $steps["updateSlideNum"] === "object" &&
                typeof $steps["updateSlideNum"].then === "function"
              ) {
                $steps["updateSlideNum"] = await $steps["updateSlideNum"];
              }
            }}
            size={"small"}
            startIcon={
              '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.59009 16.59L13.1701 12L8.59009 7.41L10.0001 6L16.0001 12L10.0001 18L8.59009 16.59Z" fill="currentColor"/></svg>'
            }
          />
        </div>
      </div>
      <Stack__
        as={PlasmicLink__}
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        href={(() => {
          try {
            return `https://sindibad.iq/hotels/${$props.currentCity}/${$props.currentHotel.hotelId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.currentHotel.content.title.locale;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h3>
        <div className={classNames(projectcss.all, sty.freeBox__v8Xkw)}>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return (() => {
                  const rep = [];
                  for (let i = 1; i <= $props.currentHotel.content.star; i++) {
                    rep.push(i);
                  }
                  return rep;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__eItO1)}
                key={currentIndex}
              >
                <Embed
                  className={classNames(
                    "__wab_instance",
                    sty.embedHtml___5WXki
                  )}
                  code={
                    '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12 17.27L18.18 21L16.54 13.97L22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27Z" fill="currentColor"/>\n</svg>\n'
                  }
                />
              </div>
            );
          })}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hhswU
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentHotel.content.star + " " + "نجوم";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1Xpxn)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.currentHotel.content.tags;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentTag = __plasmic_item_0;
            const tagIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sSfNj)}
                key={tagIndex}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lnX7K)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return currentTag.tagIconUrl;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bCQg
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentTag.displayText.locale;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            );
          })}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "lightbox", "link", "h3"],
  lightbox: ["lightbox"],
  link: ["link", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lightbox: typeof Lightbox;
  link: "a";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHotelCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHotelCard__VariantsArgs;
    args?: PlasmicHotelCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHotelCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHotelCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHotelCard__ArgProps,
          internalVariantPropNames: PlasmicHotelCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHotelCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHotelCard";
  } else {
    func.displayName = `PlasmicHotelCard.${nodeName}`;
  }
  return func;
}

export const PlasmicHotelCard = Object.assign(
  // Top-level PlasmicHotelCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lightbox: makeNodeComponent("lightbox"),
    link: makeNodeComponent("link"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicHotelCard
    internalVariantProps: PlasmicHotelCard__VariantProps,
    internalArgProps: PlasmicHotelCard__ArgProps
  }
);

export default PlasmicHotelCard;
/* prettier-ignore-end */
