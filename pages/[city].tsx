// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PageParamsProvider as PageParamsProvider__ } from "@plasmicapp/react-web/lib/host";

import { PlasmicByCity } from "../components/plasmic/hotel_seo/PlasmicByCity";
import { useRouter } from "next/router";
import { extractPlasmicQueryData } from '@plasmicapp/react-web/lib/prepass';
import { PlasmicQueryDataProvider } from '@plasmicapp/react-web/lib/query';
export async function getStaticPaths() {
  const paths: any = [];

  return {
    paths,
    fallback: 'blocking'
  };
}
export async function getStaticProps(context: any) {
  const { city } = context.params;
  const query = context.query;

  const queryCache = await extractPlasmicQueryData(
    <PageParamsProvider__
      route={context.resolvedUrl}
      params={{ ...query, city }}
    >
      <PlasmicByCity />
    </PageParamsProvider__>
  );
  console.log("queryCache:", JSON.stringify(queryCache));
  const id = "d099d077-c947-4822-972a-2808620ff5c3"
  const isOkay = Object.keys(queryCache).some(k => k.includes(id))
  if (!isOkay) {
    return {
      notFound: true,
    };
  } else {
    return {
      props: { queryCache, city, query },
      revalidate: 864000
    };
  }
}

function ByCity({ queryCache, city, query }: any) {
  const router = useRouter();
  return (
    <PageParamsProvider__
      route={router.pathname}
      params={{ ...query, city }}
    >
      <PlasmicQueryDataProvider prefetchedCache={queryCache}>
        <PlasmicByCity />
      </PlasmicQueryDataProvider>
    </PageParamsProvider__>
  );
}

export default ByCity;
